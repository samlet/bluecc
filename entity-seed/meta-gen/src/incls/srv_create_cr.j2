use chrono::{DateTime, Utc};
use crate::params::Object;
use crate::{SrvDeles, SrvResp, GenericError, DynamicValue};
use std::collections::HashMap;
use serde_json::json;

/// The parameters for `{{ent['entity-name'] -}}::{{ srv.name | action | snake_case }}`.
#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "camelCase")]
pub struct {{ srv.name | action }}{{ent['entity-name'] -}} {
{%- for fld in inputs %}
    {% if fld.optional -%}
    #[serde(skip_serializing_if = "Option::is_none")]
    {% endif -%}
    pub {{fld.name | snake_case}}: {% if fld.optional %}Option<{% endif %}{{fld['type_name'] | plain_type }}{% if fld.optional %}>{% endif %},
{%- endfor %}
}

impl {{ srv.name | action }}{{ent['entity-name'] -}} {
    pub fn new({{ reqs }}) -> Self {
        {{ srv.name | action }}{{ent['entity-name'] -}} {
{%- for fld in inputs %}
            {% if fld.optional -%}
            {{fld.name | snake_case}}: Default::default(),
            {%- else -%}
            {{fld.name | snake_case}},
            {%- endif -%}
{%- endfor %}
        }
    }
}

const {{ srv.name | static_var }}: &'static str = "{{ srv.name }}";
