#[derive(Debug, Deserialize, Serialize, Clone)]
#[serde(rename_all(serialize = "camelCase", deserialize = "camelCase"))]
pub struct {{ent['entity-name'] -}} {
    #[serde(flatten)]
    pub id: {{ent['entity-name'] -}}Id,
    // fields
{%- for fld in flds %}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub {{fld.name | snake_case}}: {{fld['type'] | orig_type}}{% if not loop.last %},{% endif %}
{%- endfor %}
}

#[derive(Debug, Deserialize, Serialize, Clone)]
#[serde(rename_all(serialize = "camelCase", deserialize = "camelCase"))]
pub struct {{ent['entity-name'] -}}Id {
{%- for fld in keys %}
    pub {{fld.name | snake_case}}: {{fld['type'] | orig_type}},
{%- endfor %}
}

impl Object for {{ent['entity-name'] -}} {
    type Id = {{ent['entity-name'] -}}Id;
    fn id(&self) -> Self::Id {
        self.id.clone()
    }
    fn object(&self) -> &'static str {
        "{{ent['entity-name'] | snake_case -}}"
    }
}
